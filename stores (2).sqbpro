<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="C:/Users/esthe/Downloads/stores (1).db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="3785"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><current_table name="4,9:maincustomers"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="customers" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="118"/><column index="2" value="203"/><column index="3" value="121"/><column index="4" value="121"/><column index="5" value="119"/><column index="6" value="189"/><column index="7" value="145"/><column index="8" value="113"/><column index="9" value="79"/><column index="10" value="80"/><column index="11" value="81"/><column index="12" value="176"/><column index="13" value="76"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="SQL 1">

--query to compute the low stock for each product using a correlated subquery

SELECT productCode, low_stock

FROM (

  SELECT

    p.productCode,

    ROUND(SUM(od.quantityOrdered * 1.0) / p.quantityInStock, 2) AS low_stock,

    ROW_NUMBER() OVER (ORDER BY ROUND(SUM(od.quantityOrdered * 1.0) / p.quantityInStock, 2) DESC) AS row_num

  FROM products AS p

  JOIN orderdetails AS od

    ON p.productCode = od.productCode

 GROUP BY p.productCode

) AS ranked_low_stock

WHERE row_num &lt;= 10;

--query to compute the product performance for each product

SELECT productCode, product_performance

  FROM (

    SELECT p.productCode,

           SUM(od.quantityOrdered*od.priceEach) AS product_performance,

 row_number() over (ORDER BY SUM(od.quantityOrdered* od.priceEach) DESC) AS row_number

      FROM products as p

      JOIN orderdetails as od

     WHERE od.productCode = p.productCode

     GROUP BY p.productCode

) AS ranked_product_performance

WHERE row_number &lt;= 10;

--Combining the previous queries using a Common Table Expression (CTE) to display priority products for restocking using the IN operator

WITH LowStockCTE AS (

  SELECT

    p.productCode,

    ROUND(SUM(od.quantityOrdered * 1.0) / p.quantityInStock, 2) AS low_stock,

    ROW_NUMBER() OVER (ORDER BY ROUND(SUM(od.quantityOrdered * 1.0) / p.quantityInStock, 2) DESC) AS row_num

  FROM products AS p

  JOIN orderdetails AS od

  ON p.productCode = od.productCode

  GROUP BY p.productCode

)

, ProductPerformanceCTE AS (

  SELECT

    p.productCode,

    SUM(od.quantityOrdered * od.priceEach) AS product_performance,

    ROW_NUMBER() OVER (ORDER BY SUM(od.quantityOrdered * od.priceEach) DESC) AS row_num

  FROM products AS p

  JOIN orderdetails AS od

  ON p.productCode = od.productCode

  GROUP BY p.productCode

)

SELECT L.productCode, L.low_stock, P.product_performance

FROM LowStockCTE L

JOIN ProductPerformanceCTE P

ON L.productCode = P.productCode

WHERE L.row_num &lt;= 10 AND P.row_num &lt;= 10;</sql><current_tab id="0"/></tab_sql></sqlb_project>
